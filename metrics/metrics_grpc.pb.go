// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: metrics.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PerformanceMetricsServiceClient is the client API for PerformanceMetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerformanceMetricsServiceClient interface {
	StartRecording(ctx context.Context, in *StartRecordingRequest, opts ...grpc.CallOption) (*PerformanceMetrics, error)
	StopRecording(ctx context.Context, in *StopRecordingRequest, opts ...grpc.CallOption) (*PerformanceMetrics, error)
}

type performanceMetricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerformanceMetricsServiceClient(cc grpc.ClientConnInterface) PerformanceMetricsServiceClient {
	return &performanceMetricsServiceClient{cc}
}

func (c *performanceMetricsServiceClient) StartRecording(ctx context.Context, in *StartRecordingRequest, opts ...grpc.CallOption) (*PerformanceMetrics, error) {
	out := new(PerformanceMetrics)
	err := c.cc.Invoke(ctx, "/main.PerformanceMetricsService/StartRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceMetricsServiceClient) StopRecording(ctx context.Context, in *StopRecordingRequest, opts ...grpc.CallOption) (*PerformanceMetrics, error) {
	out := new(PerformanceMetrics)
	err := c.cc.Invoke(ctx, "/main.PerformanceMetricsService/StopRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerformanceMetricsServiceServer is the server API for PerformanceMetricsService service.
// All implementations must embed UnimplementedPerformanceMetricsServiceServer
// for forward compatibility
type PerformanceMetricsServiceServer interface {
	StartRecording(context.Context, *StartRecordingRequest) (*PerformanceMetrics, error)
	StopRecording(context.Context, *StopRecordingRequest) (*PerformanceMetrics, error)
	mustEmbedUnimplementedPerformanceMetricsServiceServer()
}

// UnimplementedPerformanceMetricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPerformanceMetricsServiceServer struct {
}

func (UnimplementedPerformanceMetricsServiceServer) StartRecording(context.Context, *StartRecordingRequest) (*PerformanceMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (UnimplementedPerformanceMetricsServiceServer) StopRecording(context.Context, *StopRecordingRequest) (*PerformanceMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}
func (UnimplementedPerformanceMetricsServiceServer) mustEmbedUnimplementedPerformanceMetricsServiceServer() {
}

// UnsafePerformanceMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerformanceMetricsServiceServer will
// result in compilation errors.
type UnsafePerformanceMetricsServiceServer interface {
	mustEmbedUnimplementedPerformanceMetricsServiceServer()
}

func RegisterPerformanceMetricsServiceServer(s grpc.ServiceRegistrar, srv PerformanceMetricsServiceServer) {
	s.RegisterService(&PerformanceMetricsService_ServiceDesc, srv)
}

func _PerformanceMetricsService_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceMetricsServiceServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PerformanceMetricsService/StartRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceMetricsServiceServer).StartRecording(ctx, req.(*StartRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceMetricsService_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceMetricsServiceServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PerformanceMetricsService/StopRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceMetricsServiceServer).StopRecording(ctx, req.(*StopRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PerformanceMetricsService_ServiceDesc is the grpc.ServiceDesc for PerformanceMetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerformanceMetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.PerformanceMetricsService",
	HandlerType: (*PerformanceMetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRecording",
			Handler:    _PerformanceMetricsService_StartRecording_Handler,
		},
		{
			MethodName: "StopRecording",
			Handler:    _PerformanceMetricsService_StopRecording_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}
