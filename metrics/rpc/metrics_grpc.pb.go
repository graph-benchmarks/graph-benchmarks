// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: metrics.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsCollectorClient is the client API for MetricsCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsCollectorClient interface {
	StartRecording(ctx context.Context, in *Start, opts ...grpc.CallOption) (*Ack, error)
	StopRecording(ctx context.Context, in *Stop, opts ...grpc.CallOption) (*Ack, error)
}

type metricsCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsCollectorClient(cc grpc.ClientConnInterface) MetricsCollectorClient {
	return &metricsCollectorClient{cc}
}

func (c *metricsCollectorClient) StartRecording(ctx context.Context, in *Start, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/rpc.MetricsCollector/StartRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsCollectorClient) StopRecording(ctx context.Context, in *Stop, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/rpc.MetricsCollector/StopRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsCollectorServer is the server API for MetricsCollector service.
// All implementations must embed UnimplementedMetricsCollectorServer
// for forward compatibility
type MetricsCollectorServer interface {
	StartRecording(context.Context, *Start) (*Ack, error)
	StopRecording(context.Context, *Stop) (*Ack, error)
	mustEmbedUnimplementedMetricsCollectorServer()
}

// UnimplementedMetricsCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsCollectorServer struct {
}

func (UnimplementedMetricsCollectorServer) StartRecording(context.Context, *Start) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (UnimplementedMetricsCollectorServer) StopRecording(context.Context, *Stop) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}
func (UnimplementedMetricsCollectorServer) mustEmbedUnimplementedMetricsCollectorServer() {}

// UnsafeMetricsCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsCollectorServer will
// result in compilation errors.
type UnsafeMetricsCollectorServer interface {
	mustEmbedUnimplementedMetricsCollectorServer()
}

func RegisterMetricsCollectorServer(s grpc.ServiceRegistrar, srv MetricsCollectorServer) {
	s.RegisterService(&MetricsCollector_ServiceDesc, srv)
}

func _MetricsCollector_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Start)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsCollectorServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricsCollector/StartRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsCollectorServer).StartRecording(ctx, req.(*Start))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsCollector_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsCollectorServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricsCollector/StopRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsCollectorServer).StopRecording(ctx, req.(*Stop))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsCollector_ServiceDesc is the grpc.ServiceDesc for MetricsCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MetricsCollector",
	HandlerType: (*MetricsCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRecording",
			Handler:    _MetricsCollector_StartRecording_Handler,
		},
		{
			MethodName: "StopRecording",
			Handler:    _MetricsCollector_StopRecording_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}

// PerformanceMetricsQueryServiceClient is the client API for PerformanceMetricsQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerformanceMetricsQueryServiceClient interface {
	Query(ctx context.Context, in *MetricsQuery, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type performanceMetricsQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerformanceMetricsQueryServiceClient(cc grpc.ClientConnInterface) PerformanceMetricsQueryServiceClient {
	return &performanceMetricsQueryServiceClient{cc}
}

func (c *performanceMetricsQueryServiceClient) Query(ctx context.Context, in *MetricsQuery, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, "/rpc.PerformanceMetricsQueryService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerformanceMetricsQueryServiceServer is the server API for PerformanceMetricsQueryService service.
// All implementations must embed UnimplementedPerformanceMetricsQueryServiceServer
// for forward compatibility
type PerformanceMetricsQueryServiceServer interface {
	Query(context.Context, *MetricsQuery) (*MetricsResponse, error)
	mustEmbedUnimplementedPerformanceMetricsQueryServiceServer()
}

// UnimplementedPerformanceMetricsQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPerformanceMetricsQueryServiceServer struct {
}

func (UnimplementedPerformanceMetricsQueryServiceServer) Query(context.Context, *MetricsQuery) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedPerformanceMetricsQueryServiceServer) mustEmbedUnimplementedPerformanceMetricsQueryServiceServer() {
}

// UnsafePerformanceMetricsQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerformanceMetricsQueryServiceServer will
// result in compilation errors.
type UnsafePerformanceMetricsQueryServiceServer interface {
	mustEmbedUnimplementedPerformanceMetricsQueryServiceServer()
}

func RegisterPerformanceMetricsQueryServiceServer(s grpc.ServiceRegistrar, srv PerformanceMetricsQueryServiceServer) {
	s.RegisterService(&PerformanceMetricsQueryService_ServiceDesc, srv)
}

func _PerformanceMetricsQueryService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceMetricsQueryServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PerformanceMetricsQueryService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceMetricsQueryServiceServer).Query(ctx, req.(*MetricsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PerformanceMetricsQueryService_ServiceDesc is the grpc.ServiceDesc for PerformanceMetricsQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerformanceMetricsQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PerformanceMetricsQueryService",
	HandlerType: (*PerformanceMetricsQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _PerformanceMetricsQueryService_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}
